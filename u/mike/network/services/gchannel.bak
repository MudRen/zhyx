/*
 * This protocol is used to broadcast a channel to a group of other muds.
 */

// by Annihilator (06/15/95)
// update by Lonely

#undef DEBUG

#undef BIG5

#include <net/macros.h>
#include <net/dns.h>
#include <net/daemons.h>
#include <net/services.h>

inherit F_CLEAN_UP;
inherit F_DBASE;

// #define G_CHANNEL ({ "gwiz", "gbwiz", "wiz", "nt" })
#define BIG5_SITE  CONFIG_DIR + "big5_site"
#define BLOCK_SITE  CONFIG_DIR + "block_site"

nosave string *Big5;
nosave string *Block;
nosave string channel_id = "网路频道精灵";

mixed set(string arg,string str)
{
        if (arg && arg == "channel_id")
        {
                channel_id = str;
                return 1;
        }
        return 0;
}    

mixed query(string arg)
{
        if (arg && arg == "channel_id") 
                return channel_id;
        return 0;

}

int is_Block(string site)
{
        if (site)
        {
                site = upper_case(site);
                return (member_array(site, Block) != -1);
        }
        else
                return 0;
}
void add_Block(string site)
{
        if (! site)  return;
        if (is_Block(site))  return;
        
        site = upper_case(site);
        Block += ({ site });
        Block = sort_array(Block, 1);
        
        write_file(BLOCK_SITE, implode(Block, "\n"), 1);
}

void remove_Block(string site)
{
        if (! site)  return;
        if (! is_Block(site))  return;
   
        site = upper_case(site);
        Block -= ({ site });
        Block = sort_array(Block, 1);
        
        write_file(BLOCK_SITE, implode(Block, "\n"), 1);
}


int is_Big5(string site)
{
        if (site)
        {
                site = upper_case(site);
                return (member_array(site, Big5) != -1);
        }
        else
                return 0;
}

void add_Big5(string site)
{
        if (! site)  return;
        if (is_Big5(site))  return;
        
        site = upper_case(site);
        Big5 += ({ site });
        Big5 = sort_array(Big5, 1);
    
        write_file(BIG5_SITE, implode(Big5, "\n"), 1);
}

void remove_Big5(string site)
{
        if (! site)  return;
        if (! is_Big5(site))  return;
        site = upper_case(site);
        Big5 -= ({ site });
        Big5 = sort_array(Big5, 1);
        write_file(BIG5_SITE, implode(Big5, "\n"), 1);
}

void create() 
{
        string site;

        seteuid(ROOT_UID);
        
        if (file_size(BIG5_SITE) > 0)
        {
                site = read_file(BIG5_SITE);
                Big5 = explode(site, "\n");
        } else
                Big5 = ({ });
                
        if (file_size(BLOCK_SITE) > 0)
        {
                site = read_file(BLOCK_SITE);
                Block = explode(site, "\n");
        }else
                Block = ({ });
}

// This is the interface to the intermud channels
void send_msg(string channel, string id, string name, string msg, int emoted,
              mixed filter)
{
        string *names;
        int i;
        mapping muds;
        mapping svcs;
        mapping minfo;

        if (! ACCESS_CHECK(previous_object())) return;

#ifdef DEBUG
        set("channel_id", "网路频道精灵");
        CHANNEL_D->do_channel(this_object(), "sys", "prepare to send gchannel message.");
#endif

#ifdef BIG5
        msg = LANGUAGE_D->GB2Big5(msg);
        name = LANGUAGE_D->GB2Big5(name);
#endif

        muds = (mapping)DNS_MASTER->query_muds();
        svcs = (mapping)DNS_MASTER->query_svc();
        msg = replace_string(msg, "|", "");
        msg = replace_string(msg, "@@@", "");
        // use keys(svcs) because none of the muds not in svcs can possibley
        // receive the message
        names = keys(svcs);
        i = sizeof(names);
        while (i--)
                if ((names[i] != mud_nname()) &&
                    evaluate(filter, muds[names[i]]))
                {
                        minfo = muds[names[i]];
                        if (! mapp(minfo) || ! mapp(svcs[names[i]]) ||
                            ! (svcs[names[i]]["gwizmsg"] & SVC_UDP))
                                continue;
#ifdef DEBUG
        set("channel_id", "网路频道精灵");
        CHANNEL_D->do_channel(this_object(), "sys",
                sprintf("gchannel message sent to %s.", minfo["NAME"]));
#endif
                        // 测试
                        DNS_MASTER->send_udp(minfo["HOSTADDRESS"], minfo["PORTUDP"],
                                "@@@" + DNS_GCHANNEL +
                                "||NAME:" + Mud_name() +
                                "||PORTUDP:" + udp_port() +
                                "||USRNAME:" + capitalize(id) +
                                "||CNAME:" + name +
                                "||MSG:" + msg +
                                "||CHANNEL:" + channel +
                                (emoted?"||EMOTE:1":"") + "@@@\n");
                }
}


void incoming_request(mapping info)
{
        mapping minfo;
        string tmsg;

        if (! ACCESS_CHECK(previous_object())) return;

        if (info["NAME"])
        {
                if (info["NAME"] == Mud_name()) return;

                if (member_array(upper_case(info["NAME"]), Block) != -1)
                {
                        CHANNEL_D->do_channel(this_object(), "debug","tune off "+ info["NAME"] );
                        return;
                }

                minfo = DNS_MASTER->query_mud_info(info["NAME"]);
                if (! minfo || ! strlen(info["USRNAME"]) ||
                    ! DNS_MASTER->dns_mudp(info["NAME"]))
                {
                        // We don't accept the message.  But ping them anyway.
                        PING_Q->send_ping_q(info["HOSTADDRESS"], info["PORTUDP"]);
                        return ;
                }
                // by Lonely
                // if (minfo["MUDLIB"] != MUDLIB_NAME) return;

                if (info["HOSTADDRESS"] != minfo["HOSTADDRESS"])
                {
                        if (info["EMOTE"])
                                tmsg = info["USRNAME"]+"@"+info["NAME"]+" "+info["MSG"];
                        else
                                tmsg = info["USRNAME"]+"@"+info["NAME"]+": "+info["MSG"];

                        // Faked.  sheeze... 
                        dns_log("dns_fake", sprintf( "Gchannel: %s %s\n%s", ctime(time()),
                                info["HOSTADDRESS"],tmsg));
                        DNS_MASTER->send_udp(info["HOSTADDRESS"], info["PORTUDP"],
                                "@@@"+DNS_WARNING+
                                "||NAME:"+Mud_name()+
                                "||MSG: Fake gchannel msg: " + tmsg +
                                "||FAKEHOST:"+info["HOSTADDRESS"] +
                                "@@@\n");
                        return;
                }

#ifdef DEBUG
                CHANNEL_D->do_channel(this_object(), DEBUG,
                        sprintf("gchannel message get from %O.", minfo) );
#endif

                if (undefinedp(info["CNAME"]))
                        set("channel_id", sprintf("%s@%s", info["USRNAME"], info["NAME"]));
                else
                        set("channel_id", sprintf("%s(%s@%s)", info["CNAME"], info["USRNAME"], info["NAME"]));

                tmsg = lower_case(info["CHANNEL"]);
                if (is_Big5(info["NAME"]))
                {
                        set("channel_id", LANGUAGE_D->Big52GB(query("channel_id")));
                        info["MSG"] = LANGUAGE_D->Big52GB(info["MSG"]);
                }
                /*
                tmsg = lower_case(info["CHANNEL"]);
                if(member_array(tmsg, G_CHANNEL) == -1)
                {
                        info["MSG"] = "("+tmsg+")"+info["MSG"];
                        tmsg = "lic";
                }
                */

                // CHANNEL_D->do_channel(this_object(), info["CHANNEL"], info["MSG"], info["EMOTE"]);
                CHANNEL_D->do_channel(this_object(), tmsg, info["MSG"], info["EMOTE"], 1);
        }
}

